local G = (getgenv and getgenv()) or _G
if G.__LimitHub_Running then
    warn("[LimitHub] Script Already Running")
    return
end
G.__LimitHub_Running = true

local Library, SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/jamalarap61/Mslspakwnendlsowjnssoaknana/main/wnsoaowknswlwksnwmk.lua"))()
local CONFIG_PATH = "LimitHub/FishIT/config/FishIT.json"

-- ===== services/locals =====
local Players            = game:GetService("Players")
local LocalPlayer        = Players.LocalPlayer
local HttpService        = game:GetService("HttpService")
local ReplicatedStorage  = game:GetService("ReplicatedStorage")

-- =======================================================================
-- UI Window
-- =======================================================================
local function gradient(text, startColor, endColor)
    local result, length = "", #text
    for i = 1, length do
        local t = (i - 1) / math.max(length - 1, 1)
        local r = math.floor((startColor.R + (endColor.R - startColor.R) * t) * 255)
        local g = math.floor((startColor.G + (endColor.G - startColor.G) * t) * 255)
        local b = math.floor((startColor.B + (endColor.B - startColor.B) * t) * 255)
        result = result .. string.format('<font color="rgb(%d, %d, %d)">%s</font>', r, g, b, text:sub(i, i))
    end
    return result
end

local Window = Library:CreateWindow({
    Title = gradient("LimitHub | Fish It v0.1 [All Version]", Color3.fromHex("#8ab4f8"), Color3.fromHex("#00ffe1")),
    Size = UDim2.new(0, 480, 0, 300),
    TabWidth = 120,
    Theme = "LimitHub",
    Acrylic = false
})
local Tabs = {
    Main     = Window:AddTab({ Title = "Main",     Icon = "star" }),
    Player   = Window:AddTab({ Title = "Player",   Icon = "user" }),
    Event    = Window:AddTab({ Title = "Event",    Icon = "eye" }),
    Weather  = Window:AddTab({ Title = "Weather",  Icon = "cloud" }),
    Enchant  = Window:AddTab({ Title = "Enchant",  Icon = "wand" }),
    Shop     = Window:AddTab({ Title = "Shop",     Icon = "shopping-cart" }),
    Teleport  = Window:AddTab({ Title = "Teleport",  Icon = "map" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "cog" })
}
Window:SelectTab(1)

local function NotifyHub(text)
    pcall(function()
        Library:Notify({ Title = "LimitHub", Content = text, Duration = 5 })
    end)
end

-- =======================================================================
-- Webhook Option
-- =======================================================================
local WebhookState = { url = "", enabled = false }

local WebhookTab     = Window:AddTab({ Title = "Webhook", Icon = "link" })
local WebhookSection = WebhookTab:AddSection("Webhook Option")

WebhookSection:AddInput("WebhookURL", {
    Title = "Webhook URL",
    Description = "",
    Placeholder = "You webhook link here!",
    Default = "",
    Callback = function(text)
        WebhookState.url = tostring(text or "")
    end
})

-- ====== Filter Rarity utk Webhook (fix multi-select) ======
WebhookState.rarityFilter = {}
WebhookState._raritySet   = {}

local function _normR(s) return (tostring(s or ""):gsub("^%s+",""):gsub("%s+$",""):lower()) end

local RarityValues = {
    Common     = "Common",
    Uncommon   = "Uncommon",
    Rare       = "Rare",
    Epic       = "Epic",
    Legendary  = "Legendary",
    Mythic     = "Mythic",
    Secret     = "Secret",
}

local function _rebuildRaritySet(vals)
    for k in pairs(WebhookState._raritySet) do WebhookState._raritySet[k] = nil end
    table.clear(WebhookState.rarityFilter)
    if type(vals) ~= "table" then return end

    local hasNumeric = false
    for k,_ in pairs(vals) do if typeof(k) == "number" then hasNumeric = true break end end

    if hasNumeric then
        for _,v in ipairs(vals) do
            local key = _normR(v)
            if key ~= "" then
                WebhookState._raritySet[key] = true
                table.insert(WebhookState.rarityFilter, v)
            end
        end
    else
        for k,v in pairs(vals) do
            if v then
                local key = _normR(k)
                if key ~= "" then
                    WebhookState._raritySet[key] = true
                    table.insert(WebhookState.rarityFilter, k)
                end
            end
        end
    end
end

WebhookSection:AddDropdown("RarityWebhook", {
    Title = "Choose Rarity Webhook",
    Description = "Only show rarity you want (empty = all)",
    Values = RarityValues,
    Default = {},
    Multi = true,
    Callback = function(vals)
        _rebuildRaritySet(vals)
    end
})

WebhookSection:AddToggle("WebhookToggle", {
    Title = "Enable Webhook",
    Description = "Send Webhook that fish you caught!",
    Default = false,
    Callback = function(on)
        WebhookState.enabled = on and true or false
    end
})

local function sendWebhook(message, state)
    state = state or WebhookState
    local msg = tostring(message or "")
    if not (state.enabled and type(state.url) == "string" and #state.url > 0) then return end
    local req = (syn and syn.request) or (http and http.request) or http_request or request
    if not req then return end
    pcall(function()
        req({
            Url = state.url, Method = "POST",
            Headers = { ["Content-Type"] = "application/json" },
            Body = HttpService:JSONEncode({ content = msg })
        })
    end)
end

local function sendWebhookEmbed(title, fields, state)
    state = state or WebhookState
    if not (state.enabled and type(state.url) == "string" and #state.url > 0) then return end
    local req = (syn and syn.request) or (http and http.request) or http_request or request
    if not req then return end
    local embed = {
        title = tostring(title or "Catch"),
        color = 3447003,
        fields = fields or {},
        footer = { text = "discord.gg/limithub" },
        timestamp = DateTime.now():ToIsoDate()
    }
    pcall(function()
        req({
            Url = state.url, Method = "POST",
            Headers = { ["Content-Type"] = "application/json" },
            Body = HttpService:JSONEncode({ content = "", embeds = { embed } })
        })
    end)
end

-- === API wrapper (dipakai SendFishPublic)
local function LRM_SEND_WEBHOOK(url, payload)
    local req = (syn and syn.request) or (http and http.request) or http_request or request
    if not (req and type(url)=="string" and #url>0) then return end
    pcall(function()
        req({
            Url = url,
            Method = "POST",
            Headers = {["Content-Type"]="application/json"},
            Body = HttpService:JSONEncode(payload)
        })
    end)
end

local function _norm(s) return (tostring(s or ""):lower():gsub("[^%w]+"," "):gsub("%s+"," ")) end

local TierMap = {
    [1]="Common",[2]="Uncommon",[3]="Rare",[4]="Epic",
    [5]="Legendary",[6]="Mythic",[7]="Secret",
}
local RarityColor = {
    Common=0x95A5A6, Uncommon=0x2ECC71, Rare=0x3498DB, Epic=0x9B59B6,
    Legendary=0xF1C40F, Mythic=0xE67E22, Secret=0xE74C3C
}

getgenv().tierArray = getgenv().tierArray or {
    { Name="Common",    Rarity=1,       TierColor=ColorSequence.new(Color3.fromRGB(255, 250, 246)), Tier=1 },
    { Name="Uncommon",  Rarity=0.02,    TierColor=ColorSequence.new(Color3.fromRGB(195, 255, 85)),  Tier=2 },
    { Name="Rare",      Rarity=0.004,   TierColor=ColorSequence.new(Color3.fromRGB(85, 162, 255)),  Tier=3 },
    { Name="Epic",      Rarity=0.001,   TierColor=ColorSequence.new(Color3.fromRGB(173, 79, 255)),  Tier=4 },
    { Name="Legendary", Rarity=0.0002,  TierColor=ColorSequence.new(Color3.fromRGB(255, 184, 42)),  Tier=5 },
    { Name="Mythic",    Rarity=0.00002, TierColor=ColorSequence.new(Color3.fromRGB(255, 24, 24)),   Tier=6 },
    { Name="SECRET",    Rarity=0.000004, TierColor=ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(23, 255, 151)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(11, 149, 255)),
    }), Tier=7 },
}

local function getRarityInfo(rarityValue)
    for _, rarityData in ipairs(getgenv().tierArray) do
        if rarityData.Rarity == rarityValue then
            return rarityData
        end
    end
    return nil
end

local MUT_PREFIX = { ghost=true, stone=true, gold=true, albino=true, shiny=true, big=true, corrupt=true }
local function baseNameForRarity(displayName)
    local words = {}
    for w in tostring(displayName or ""):gmatch("%S+") do table.insert(words, w) end
    if #words == 0 then return displayName end
    local first = words[1]:lower()
    if MUT_PREFIX[first] and #words >= 2 then
        table.remove(words, 1)
        return table.concat(words, " ")
    end
    return displayName
end

local function tierNameFromTier(tierNumber)
    if not tierNumber then return nil end
    local tn = TierMap and TierMap[tierNumber]
    if tn then return tn end
    local arr = getgenv().tierArray
    if type(arr) == "table" then
        for _, it in ipairs(arr) do
            if tonumber(it.Tier) == tonumber(tierNumber) then
                return tostring(it.Name)
            end
        end
    end
    return nil
end

local function _extractAssetId(s)
    if type(s)~="string" then return nil end
    return s:match("rbxassetid://(%d+)") or s:match("(%d+)$")
end

local function _thumbFromAssetId(assetStr)
    local id = _extractAssetId(assetStr)
    if not id then return nil end
    local ok, res = pcall(function()
        local url = ("https://thumbnails.roblox.com/v1/assets?assetIds=%s&size=420x420&format=Png&isCircular=false"):format(id)
        local raw = game:HttpGet(url)
        return HttpService:JSONDecode(raw)
    end)
    if ok and res and res.data and res.data[1] and res.data[1].imageUrl then
        return res.data[1].imageUrl
    end
    return nil
end

-- Cari ModuleScript item by Data.Name
local function findItemModule(fishDisplayName)
    local Items = ReplicatedStorage:FindFirstChild("Items")
    if not Items then return nil, nil end
    local target = tostring(fishDisplayName or ""):lower():gsub("%s+"," ")

    for _, ms in ipairs(Items:GetDescendants()) do
        if ms:IsA("ModuleScript") then
            local ok, mod = pcall(require, ms)
            if ok and type(mod) == "table" then
                local d = mod.Data or mod.data or mod
                local nm = d and d.Name and tostring(d.Name):lower():gsub("%s+"," ")
                if nm and nm == target then
                    return ms, d, mod
                end
            end
        end
    end
    return nil, nil
end

local _fishCache = {}  -- key: norm(name) -> {name, rarity, tier, sellPrice, chance, iconUrl}

-- ==== SellPrice dari ROOT module (modTable.SellPrice) ====
local function resolveFishInfoByName(name)
    if not name or name=="" then return nil end
    local key = _norm(name)
    if _fishCache[key] ~= nil then return _fishCache[key] or nil end

    local _, data, modTable = findItemModule(name)
    if data then
        local tierNum   = tonumber(data.Tier)
        local tierName  = tierNameFromTier(tierNum) or "(unknown)"
        local rarity    = tierName

        local sellPrice = tonumber(modTable and modTable.SellPrice) or tonumber(data.SellPrice)

        local chance    = nil
        if data.Probability and data.Probability.Chance then
            chance = tonumber(data.Probability.Chance)
        end

        local iconUrl = nil
        if data.Icon then
            iconUrl = _thumbFromAssetId(data.Icon)
        end

        local info = {
            name     = data.Name or name,
            tier     = tierNum,
            tierName = tierName,
            rarity   = rarity,
            sellPrice= sellPrice,
            chance   = chance,
            iconUrl  = iconUrl
        }
        _fishCache[key] = info
        return info
    end

    _fishCache[key] = false
    return nil
end

local function _passRarityFilter(r)
    local set = WebhookState._raritySet
    if not set or next(set) == nil then return true end
    return set[_normR(r)] == true
end

local AUTHOR_ICON = "https://cdn.discordapp.com/attachments/1412614172302381106/1412899628629758122/B43515AA-FBA7-4D37-B830-5C531B5A0158.png?ex=68b9f8d1&is=68b8a751&hm=8fe9bfd14168ce1f09becd02b388734f2a257f726afbde62ecc9a9f18d0e7c2e"

-- =======================================================================
-- Player Stats (counter by CATCH only) + rarity grouping + mutation-aware
-- =======================================================================
local Stats = { counts = {}, dirty = false }

local function Stats_Add(name, n)
    name = tostring(name or ""):gsub("^%s+",""):gsub("%s+$","")
    if name == "" then return end
    Stats.counts[name] = (Stats.counts[name] or 0) + (n or 1)
    Stats.dirty = true
end
local function Stats_Reset()
    for k in pairs(Stats.counts) do Stats.counts[k] = nil end
    Stats.dirty = true
end

local PlayerStatsSection = WebhookTab:AddSection("Player Stats Webhook")

WebhookState.statsUrl     = WebhookState.statsUrl     or ""
WebhookState.statsEnabled = WebhookState.statsEnabled or false
WebhookState.statsMsgId   = WebhookState.statsMsgId   or nil
WebhookState.lastStats    = WebhookState.lastStats    or ""

PlayerStatsSection:AddInput("StatsWebhookURL", {
    Title = "Stats Webhook URL",
    Placeholder = "Paste webhook link for Player Stats!",
    Default = WebhookState.statsUrl or "",
    Callback = function(text)
        WebhookState.statsUrl = tostring(text or "")
    end
})

PlayerStatsSection:AddToggle("StatsToggle", {
    Title = "Enable Player Stats",
    Description = "Edit one webhook message with your fish list",
    Default = WebhookState.statsEnabled or false,
    Callback = function(on)
        WebhookState.statsEnabled = not not on
    end
})

PlayerStatsSection:AddButton({
    Title = "Reset Stats",
    Description = "Clear local fish counters (webhook will be updated)",
    Callback = function()
        Stats_Reset()
    end
})

local function _clockStr()
    local ok, s = pcall(function() return os.date("%H:%M:%S") end)
    return ok and s or "00:00:00"
end

local RARITY_ORDER = { "Secret","Mythic","Legendary","Epic","Rare","Common","Uncommon" }
local RARITY_INDEX = {}
for i, r in ipairs(RARITY_ORDER) do RARITY_INDEX[r] = i end

local function buildStatsEmbeds_fromCounts()
    local groups = {}
    local any = false

    for dispName, n in pairs(Stats.counts) do
        local base = baseNameForRarity(dispName)
        local info = resolveFishInfoByName(base)
        local rarity = (info and info.rarity) or "(unknown)"
        if rarity == "Legendary" then rarity = "Legendary" end

        if RARITY_INDEX[rarity] then
            any = true
            groups[rarity] = groups[rarity] or {}
            table.insert(groups[rarity], string.format("- %s x%d", dispName, tonumber(n) or 0))
        end
    end

    local embeds = {{
        author      = { name = "LimitHub", icon_url = AUTHOR_ICON },
        title       = "LimitHub – Static Player",
        description = ("Player Name : ||%s||"):format(LocalPlayer.Name),
        color       = 0x00BFFF,
        thumbnail   = { url = AUTHOR_ICON },
        footer      = { text = ("discord.gg/limithub  •  Last Update : %s"):format(_clockStr()) },
        timestamp   = DateTime.now():ToIsoDate(),
    }}

    if not any then return embeds end

    local sections = {}
    for _, rarity in ipairs(RARITY_ORDER) do
        local list = groups[rarity]
        if list and #list > 0 then
            table.sort(list)
            table.insert(sections, string.format("**%s** :\n%s", rarity, table.concat(list, "\n")))
        end
    end
    local desc = table.concat(sections, "\n\n")

    local MAX = 1800
    local function splitText(t, maxlen)
        local parts = {}
        while #t > maxlen do
            local cut = t:sub(1, maxlen)
            local p = cut:match("^(.*)\n") or cut
            table.insert(parts, p)
            t = t:sub(#p + 2)
        end
        if #t > 0 then table.insert(parts, t) end
        return parts
    end

    local chunks = splitText(desc, MAX)
    for i, chunk in ipairs(chunks) do
        table.insert(embeds, {
            description = chunk,
            color = 0x00BFFF,
            thumbnail = { url = AUTHOR_ICON },
            footer = { text = string.format("discord.gg/limithub • Last update %s%s",
                      _clockStr(), (#chunks>1 and (" • Page "..i.."/"..#chunks) or "")) },
            timestamp = DateTime.now():ToIsoDate()
        })
    end

    return embeds
end

local function updateStatsWebhook_fromCounts()
    if not WebhookState.statsEnabled or WebhookState.statsUrl == "" then return end

    local embeds  = buildStatsEmbeds_fromCounts()
    local payload = HttpService:JSONEncode({ embeds = embeds })

    if payload == WebhookState.lastStats then return end
    WebhookState.lastStats = payload

    local req = (syn and syn.request) or (http and http.request) or http_request or request
    if not req then return end

    pcall(function()
        if WebhookState.statsMsgId then
            local editUrl = WebhookState.statsUrl .. "/messages/" .. WebhookState.statsMsgId
            req({ Url = editUrl, Method = "PATCH", Headers = {["Content-Type"]="application/json"}, Body = payload })
        else
            local res = req({
                Url = WebhookState.statsUrl .. "?wait=true",
                Method = "POST",
                Headers = {["Content-Type"]="application/json"},
                Body = payload
            })
            if res and res.Body then
                local ok, json = pcall(function() return HttpService:JSONDecode(res.Body) end)
                if ok and json and json.id then WebhookState.statsMsgId = json.id end
            end
        end
    end)
end

task.spawn(function()
    while true do
        task.wait(4)
        if Stats.dirty then
            Stats.dirty = false
            updateStatsWebhook_fromCounts()
        end
    end
end)

-- === API kamu (webhook pribadi) - auto icon dari rbxasset
local function SendFishPublic(Name, Rarity, Sell, Weight)
    local base    = baseNameForRarity(Name)
    local info    = resolveFishInfoByName(base)
    local iconUrl = (info and info.iconUrl)
        or "https://cdn.discordapp.com/attachments/1211984599354445905/1405772122684391445/file_00000000cbac622f8aa3df1e8d640e88.png"

    LRM_SEND_WEBHOOK(
        "https://discord.com/api/webhooks/1416371080163233862/cNqcc3KB_WBuqMN3FyyphYJWAGjV0ks4jO01ua2G39U3xRlQ3tsvZ88xEsXXFGB5BgPY",
        {
            username = "LimitHub Notification",
            embeds = {
                {
                    title = ":confetti_ball: Congratulations! :confetti_ball: ",
                    description = "Found by: <@%DISCORD_ID%>",
                    color = 0xFF00FF,
                    thumbnail = { url = iconUrl },
                    fields = {
                        { name = "Fish Name",  value = tostring(Name or "-"),   inline = true },
                        { name = "Rairty",     value = tostring(Rarity or "-"), inline = true },
                        { name = "Sell Price", value = tostring(Sell or "-"),   inline = true },
                        { name = "Weight",     value = tostring(Weight or "-"), inline = true },
                    }
                }
            }
        }
    )
end

-- =======================================================================
-- Sending catch webhook (thumbnail + Sell Price) + PRIVATE hook on Secret
-- =======================================================================
local function sendCatchEmbedOnce(fishName, oddsText, weightNumber)
    local displayName = tostring(fishName or "")
    local base = baseNameForRarity(displayName)
    local info = resolveFishInfoByName(base)

    Stats_Add(displayName, 1)

    local effectiveRarity = (info and info.rarity) or "Unknown"
    if not _passRarityFilter(effectiveRarity) then return end

    if not (WebhookState.enabled and type(WebhookState.url)=="string" and #WebhookState.url>0) then return end
    local req = (syn and syn.request) or (http and http.request) or http_request or request
    if not req then return end

    local fields = {}
    table.insert(fields, { name="Rarity", value=tostring(info and info.tierName or effectiveRarity), inline=true })
    if info and info.sellPrice ~= nil then
        table.insert(fields, { name="Sell Price", value=tostring(info.sellPrice), inline=true })
    end
    if oddsText and oddsText ~= "" then
        table.insert(fields, { name="Odds", value=tostring(oddsText), inline=true })
    elseif info and info.chance and info.chance > 0 then
        local inv = math.max(1, math.floor(0.5 + (1 / info.chance)))
        table.insert(fields, { name="Odds", value=("1 in "..inv), inline=true })
    end
    if weightNumber then
        table.insert(fields, { name="Weight", value=string.format("%.2f kg", weightNumber), inline=true })
    end

    local embed = {
        author = { name = "LimitHub", icon_url = AUTHOR_ICON },
        title = string.format("%s\nPlayer Name : ||%s||", displayName, LocalPlayer.Name),
        description = effectiveRarity,
        color = RarityColor[effectiveRarity] or 0x3498DB,
        fields = (#fields > 0) and fields or nil,
        footer = { text = "discord.gg/limithub" },
        timestamp = DateTime.now():ToIsoDate()
    }

    if info and info.iconUrl then
        embed.thumbnail = { url = info.iconUrl }
    end

    pcall(function()
        req({
            Url = WebhookState.url,
            Method = "POST",
            Headers = {["Content-Type"]="application/json"},
            Body = HttpService:JSONEncode({ content = "", embeds = { embed } })
        })
    end)

    -- Hanya kirim ke webhook pribadi kalau Secret (tier 7)
    local isSecret = (info and ((info.tier == 1) or (tostring(info.rarity or ""):lower() == "common"))) or false 
    if isSecret then
        local sellStr   = (info and info.sellPrice) and tostring(info.sellPrice) or "—"
        local weightStr = weightNumber and string.format("%.2f kg", weightNumber) or "—"
        SendFishPublic(displayName, "Secret", sellStr, weightStr)
    end
end
-- =======================================================================
-- AUTO FISH, SELL, PLAYER, SHOP, ISLANDS, NPC, SETTINGS
-- =======================================================================

local VirtualUser = game:GetService("VirtualUser")

local net = ReplicatedStorage:WaitForChild("Packages")
    :WaitForChild("_Index")
    :WaitForChild("sleitnick_net@0.2.0")
    :WaitForChild("net")

local rodRemote        = net:WaitForChild("RF/ChargeFishingRod")
local miniGameRemote   = net:WaitForChild("RF/RequestFishingMinigameStarted")
local finishRemote     = net:WaitForChild("RE/FishingCompleted")
local PurchaseBaitRF   = net:WaitForChild("RF/PurchaseBait")

local autofish, perfectCast, ijump = false, true, false
local autoFishTask
local rodCharged = false

LocalPlayer.Idled:Connect(function()
    VirtualUser:Button2Down(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
    task.wait(1)
    VirtualUser:Button2Up(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
end)

local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local __HIDE_TAG = "__LimitHubHidden"
local __hideConns, __saved, __watchConn = {}, {}, nil

local function __rootGui(obj)
    local sg = obj:FindFirstAncestorOfClass("ScreenGui")
    if sg then return sg end
    local top = obj
    while top and top.Parent and top.Parent ~= PlayerGui do
        top = top.Parent
    end
    return top
end

local function __isFishingUi(obj)
    if obj:IsA("TextLabel") or obj:IsA("TextButton") then
        local t = (obj.Text or ""):lower()
        if t:find("click fast") or t:find("charge") or t:find("perfect") then return true end
    end
    if (obj:IsA("Frame") or obj:IsA("ImageLabel")) then
        local s = obj.AbsoluteSize
        if s and s.Y >= 80 and s.X <= 40 then
            local root = __rootGui(obj) or obj
            for _, d in ipairs(root:GetDescendants()) do
                if d:IsA("TextLabel") then
                    local tt = (d.Text or ""):lower()
                    if tt:find("click fast") or tt:find("charge") or tt:find("perfect") then return true end
                end
            end
        end
    end
    return false
end

local function __hideObj(go)
    if __saved[go] == nil then
        __saved[go] = {
            Visible = go:IsA("GuiObject") and go.Visible or nil,
            Enabled = go:IsA("ScreenGui") and go.Enabled or nil,
            BT = go:IsA("Frame") and go.BackgroundTransparency or nil,
            TT = go:IsA("TextLabel") and go.TextTransparency or nil,
            IT = go:IsA("ImageLabel") and go.ImageTransparency or nil,
        }
    end
    if go:IsA("ScreenGui") then go.Enabled = false end
    if go:IsA("GuiObject") then go.Visible = false end
    if go:IsA("Frame") then go.BackgroundTransparency = 1 end
    if go:IsA("TextLabel") then go.TextTransparency = 1 end
    if go:IsA("ImageLabel") then go.ImageTransparency = 1 end
    go:SetAttribute(__HIDE_TAG, true)

    table.insert(__hideConns, go.Changed:Connect(function(prop)
        if not go:GetAttribute(__HIDE_TAG) then return end
        if prop == "Visible" and go:IsA("GuiObject") then go.Visible = false end
        if prop == "Enabled" and go:IsA("ScreenGui") then go.Enabled = false end
        if prop == "BackgroundTransparency" and go:IsA("Frame") then go.BackgroundTransparency = 1 end
        if prop == "TextTransparency" and go:IsA("TextLabel") then go.TextTransparency = 1 end
        if prop == "ImageTransparency" and go:IsA("ImageLabel") then go.ImageTransparency = 1 end
    end))
end

local function __hideTree(root)
    if not root then return end
    if root:IsA("GuiObject") or root:IsA("ScreenGui") then __hideObj(root) end
    for _, d in ipairs(root:GetDescendants()) do
        if d:IsA("GuiObject") then __hideObj(d) end
    end
end

local function __enableHideFishingGui()
    for _, d in ipairs(PlayerGui:GetDescendants()) do
        if __isFishingUi(d) then __hideTree(__rootGui(d)) end
    end
    __watchConn = PlayerGui.DescendantAdded:Connect(function(obj)
        if __isFishingUi(obj) then __hideTree(__rootGui(obj)) end
    end)
end

local function __restoreObj(go, st)
    if not st then return end
    if go:IsA("ScreenGui") and st.Enabled ~= nil then go.Enabled = st.Enabled end
    if go:IsA("GuiObject") and st.Visible ~= nil then go.Visible = st.Visible end
    if go:IsA("Frame") and st.BT ~= nil then go.BackgroundTransparency = st.BT end
    if go:IsA("TextLabel") and st.TT ~= nil then go.TextTransparency = st.TT end
    if go:IsA("ImageLabel") and st.IT ~= nil then go.ImageTransparency = st.IT end
    go:SetAttribute(__HIDE_TAG, nil)
end

local function __disableHideFishingGui()
    if __watchConn then __watchConn:Disconnect() __watchConn = nil end
    for _, c in ipairs(__hideConns) do pcall(function() c:Disconnect() end) end
    table.clear(__hideConns)
    for go, st in pairs(__saved) do
        if go and go.Parent then pcall(function() __restoreObj(go, st) end) end
    end
    table.clear(__saved)
end

local function safeFinish()
    if rodCharged and finishRemote and finishRemote.Parent then
        local ok = pcall(function() finishRemote:FireServer() end)
        if ok then return true end
    end
    return false
end

local FarmSection = Tabs.Main:AddSection("Auto Fish")

FarmSection:AddToggle("AutoFishing", {
    Title = "Auto Fishing",
    Description = "Fast Mode (Sometimes Bug)",
    Default = false,
    Callback = function(enabled)
        if autoFishTask then task.cancel(autoFishTask); autoFishTask = nil end
        if not enabled then __disableHideFishingGui(); return end

        __enableHideFishingGui()

        autoFishTask = task.spawn(function()
            local RS = game:GetService("ReplicatedStorage")
            local okController, controllerOrErr = pcall(function() return require(RS.Controllers.FishingController) end)
            if not okController then return end
            local a = controllerOrErr

            if not _G.fishinghooked then
                local okOld, old = pcall(function() return clonefunction(a.FishingMinigameClick) end)
                if okOld and old then
                    a.FishingMinigameClick = function()
                        if getupvalue(old, 1) and getupvalue(old, 2) then
                            getupvalue(old, 3):Fire(getupvalue(old, 2))
                            return safeFinish()
                        end
                    end
                    _G.fishinghooked = true
                end
            end

            a._getPower = function() return 9e9 end

            while true do
                task.wait(0.00000001)
                pcall(function() for _, v in next, getproto(a.RequestChargeFishingRod, 1, true) do v() end end)
                pcall(function()
                    if getupvalue(a.RequestChargeFishingRod, 2) == false then
                        a.RequestChargeFishingRod(9e9); rodCharged = true
                    end
                end)
                pcall(function() safeFinish() end)
            end
        end)
    end
})

FarmSection:AddToggle("AutoFishing v2", {
    Title = "Auto Fish (Perfect Mode)",
    Description = "Best Mode (Safe)",
    Default = false,
    Callback = function(enabled)
        if autoFishTask then task.cancel(autoFishTask); autoFishTask = nil end

        if not enabled then
            __disableHideFishingGui()
            local args = { false }
            ReplicatedStorage:WaitForChild("Packages"):WaitForChild("_Index")
                :WaitForChild("sleitnick_net@0.2.0"):WaitForChild("net")
                :WaitForChild("RF/UpdateAutoFishingState"):InvokeServer(unpack(args))
            return
        end

        __enableHideFishingGui()

        autoFishTask = task.spawn(function()
            local RS = game:GetService("ReplicatedStorage")
            local okController, controllerOrErr = pcall(function() return require(RS.Controllers.FishingController) end)
            if not okController then return end
            local a = controllerOrErr

            if not _G.fishinghooked then
                local okOld, old = pcall(function() return clonefunction(a.FishingMinigameClick) end)
                if okOld and old then
                    a.FishingMinigameClick = function()
                        if getupvalue(old, 1) and getupvalue(old, 2) then
                            getupvalue(old, 3):Fire(getupvalue(old, 2))
                            return safeFinish()
                        end
                    end
                    _G.fishinghooked = true
                end
            end

            a._getPower = function() return 9e9 end

            local args = { true }
            ReplicatedStorage:WaitForChild("Packages"):WaitForChild("_Index")
                :WaitForChild("sleitnick_net@0.2.0"):WaitForChild("net")
                :WaitForChild("RF/UpdateAutoFishingState"):InvokeServer(unpack(args))

            while true do
                task.wait(0.00000001)
                pcall(function() for _, v in next, getproto(a.RequestChargeFishingRod, 1, true) do v() end end)
                pcall(function()
                    if getupvalue(a.RequestChargeFishingRod, 2) == false then
                        a.RequestChargeFishingRod(9e9); rodCharged = true
                    end
                end)
                pcall(function() safeFinish() end)
            end
        end)
    end
})

-- ====== SELL ALL button (fix path RF/SellAllItems) ======
    local function captureBasis(cf)
        return { position = cf.Position, rightVector = cf.RightVector, upVector = cf.UpVector, lookVector = cf.LookVector, cframe = cf }
    end
    local function restoreFromBasis(hrp, basis)
        hrp.CFrame = CFrame.fromMatrix(basis.position, basis.rightVector, basis.upVector, -basis.lookVector)
    end
    local function findSellRemote()
        local rf = ReplicatedStorage:FindFirstChild("RF")
        if rf and rf:FindFirstChild("SellAllItems") then return rf.SellAllItems end
        return ReplicatedStorage:FindFirstChild("SellAllItems", true)
    end

FarmSection:AddButton({
    Title = "Sell All Fishes",
    Description = "Automatically sell all Fishes",
    Callback = function()
        local charFolder = workspace:FindFirstChild("Characters")
        local char = charFolder and charFolder:FindFirstChild(LocalPlayer.Name)
        local hrp = char and char:FindFirstChild("HumanoidRootPart")
        if not hrp then return end
        local originalPos = hrp.Position
        local sellerPos = Vector3.new(-32, 5, 2885)
        local sellRemote = net:WaitForChild("RF/SellAllItems")
        task.spawn(function()
            hrp.CFrame = CFrame.new(sellerPos + Vector3.new(0, 0, 0))
            task.wait(0.5)
            pcall(function() sellRemote:InvokeServer() end)
            -- reset statistik agar sinkron setelah jual
            Stats_Reset()
            NotifyHub("Sold all fishes & reset local stats")
            hrp.CFrame = CFrame.new(originalPos + Vector3.new(0, 0, 0))
        end)
    end
})

local GuideSection = Tabs.Main:AddSection("Auto Guide")
----------------------------------------------------------------------
-- FIXED POSISI TARGET
----------------------------------------------------------------------
local COIN_POS          = Vector3.new(-553.60, 18.03, 116.94)     -- ganti sesuai pos Coin
local ENCHANT_STONE_POS = Vector3.new(-2112.59, 6.41, 3804.57)    -- ganti sesuai pos Enchant Stone

----------------------------------------------------------------------
-- HELPER: TELEPORT
----------------------------------------------------------------------
local function getHRP()
    local char = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
    return char and char:FindFirstChild("HumanoidRootPart")
end

local function tpTo(pos)
    local hrp = getHRP(); if not hrp then return end
    hrp.CFrame = CFrame.new(pos)
    pcall(function()
        hrp.AssemblyLinearVelocity  = Vector3.zero
        hrp.AssemblyAngularVelocity = Vector3.zero
    end)
end

----------------------------------------------------------------------
-- UI: DROPDOWN + TOGGLE
----------------------------------------------------------------------
local selectedPriority = "Coin"

GuideSection:AddDropdown("SelectPriority", {
    Title    = "Select Priority",
    Values   = { "Coin", "Enchant Stone" },
    Multi    = false,
    Default  = 1,
    Callback = function(val)
        selectedPriority = tostring(val or "Coin")
        if typeof(NotifyHub) == "function" then
            pcall(NotifyHub, "Priority set to: " .. selectedPriority)
        end
    end
})

GuideSection:AddToggle("TeleportPriority", {
    Title       = "Auto to Priority",
    Description = "",
    Default     = false,
    Callback    = function(state)
        if not state then return end

        if selectedPriority == "Coin" then
            tpTo(COIN_POS + Vector3.new(0, 2.5, 0))
            if typeof(NotifyHub) == "function" then
                pcall(NotifyHub, "Teleported to Coin")
            end

        elseif selectedPriority == "Enchant Stone" then
            tpTo(ENCHANT_STONE_POS + Vector3.new(0, 2.5, 0))
            if typeof(NotifyHub) == "function" then
                pcall(NotifyHub, "Teleported to Enchant Stone")
            end
        end
    end
})

----------------------------------------------------------------------
-- FRIEND TOOLS SECTION
----------------------------------------------------------------------
local Players     = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local FriendSection = Tabs.Main:AddSection("Friend Tools")

----------------------------------------------------------------------
-- STATE
----------------------------------------------------------------------
local SelectedFriendLabel = nil
local PlayerLabels = {}     -- JANGAN diganti referensinya
local LabelToPlayer = {}    -- JANGAN diganti referensinya
autoAddEnabled = false
autoAddConn = nil

----------------------------------------------------------------------
-- HELPERS
----------------------------------------------------------------------
local function buildPlayerLabel(p)
    return string.format("%s (@%s)", p.DisplayName or p.Name, p.Name)
end

local function clearArray(t)
    for i = #t, 1, -1 do t[i] = nil end
end
local function clearMap(t)
    for k in pairs(t) do t[k] = nil end
end

local function refreshPlayerList()
    -- ✨ clear in-place (tabelnya tetap sama referensinya)
    clearArray(PlayerLabels)
    clearMap(LabelToPlayer)

    for _, p in ipairs(Players:GetPlayers()) do
        if p ~= LocalPlayer then
            local label = buildPlayerLabel(p)
            table.insert(PlayerLabels, label)
            LabelToPlayer[label] = p
        end
    end
    -- kalau lib kamu punya API untuk update dropdown, panggil di tempat lain
end

local function sendFriendRequestTo(player)
    if not player or player == LocalPlayer then
        return false, "invalid"
    end
    -- cek method ada dulu biar gak call nil
    local already = false
    if LocalPlayer.IsFriendsWith then
        local okFriend, res = pcall(function()
            return LocalPlayer:IsFriendsWith(player.UserId)
        end)
        already = okFriend and res or false
    end
    if already then
        return false, "already-friends"
    end
    if not LocalPlayer.RequestFriendship then
        return false, "no-request-method"
    end
    local ok, err = pcall(function()
        LocalPlayer:RequestFriendship(player)
    end)
    return ok, err
end

----------------------------------------------------------------------
-- DROPDOWN (pakai referensi PlayerLabels yang TETAP)
----------------------------------------------------------------------
FriendSection:AddDropdown("FriendSelectPlayer", {
    Title   = "Select Player",
    Values  = PlayerLabels,   -- ini tetap valid karena kita clear in-place
    Multi   = false,
    Default = 1,
    Callback = function(label)
        SelectedFriendLabel = label
    end
})

-- isi awal + refresh saat join/leave
refreshPlayerList()
Players.PlayerAdded:Connect(refreshPlayerList)
Players.PlayerRemoving:Connect(refreshPlayerList)

----------------------------------------------------------------------
-- TOGGLE: ADD PLAYER (ONCE)
----------------------------------------------------------------------
FriendSection:AddToggle("AddPlayerOnce", {
    Title       = "Add Player",
    Description = "Send friend request to selected player",
    Default     = false,
    Callback    = function(state)
        if not state then return end

        local target = LabelToPlayer[SelectedFriendLabel]
        if not target then
            if typeof(NotifyHub) == "function" then
                pcall(NotifyHub, "Please select a player first!")
            end
            return
        end

        local ok, err = sendFriendRequestTo(target)
        if typeof(NotifyHub) == "function" then
            if ok then
                pcall(NotifyHub, "Friend request sent to "..buildPlayerLabel(target))
            else
                local msg =
                    (err == "already-friends"     and "Already friends")
                 or (err == "no-request-method" and "RequestFriendship not available in this game")
                 or ("Failed: "..tostring(err))
                pcall(NotifyHub, msg)
            end
        end
    end
})

----------------------------------------------------------------------
-- TOGGLE: AUTO ADD ALL PLAYERS (persist)
----------------------------------------------------------------------
FriendSection:AddToggle("AutoAddAllPlayers", {
    Title       = "Auto Add Player",
    Description = "Auto send friend requests to everyone in server",
    Default     = false,
    Callback    = function(state)
        autoAddEnabled = state

        if state then
            -- add semua player yang sudah ada
            for _, p in ipairs(Players:GetPlayers()) do
                if p ~= LocalPlayer then
                    sendFriendRequestTo(p)
                    task.wait(0.1)
                end
            end
            if typeof(NotifyHub) == "function" then
                pcall(NotifyHub, "Auto Add Player enabled.")
            end

            -- auto add player baru
            if not autoAddConn then
                autoAddConn = Players.PlayerAdded:Connect(function(p)
                    if autoAddEnabled and p ~= LocalPlayer then
                        sendFriendRequestTo(p)
                        if typeof(NotifyHub) == "function" then
                            pcall(NotifyHub, "Auto added "..(p.DisplayName or p.Name))
                        end
                    end
                end)
            end
        else
            if autoAddConn then
                autoAddConn:Disconnect()
                autoAddConn = nil
            end
            if typeof(NotifyHub) == "function" then
                pcall(NotifyHub, "Auto Add Player disabled.")
            end
        end
    end
})


local SellSection = Tabs.Main:AddSection("Auto Sell")

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- (opsional) kalau butuh Humanoid:
local function getHRP()
    local char = (workspace:FindFirstChild("Characters") and workspace.Characters:FindFirstChild(LocalPlayer.Name))
                 or LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    return char and char:FindFirstChild("HumanoidRootPart"), char
end

--// ================== CONFIG ==================
local SELL_TARGET = 4998  -- ganti 4998 buat real use
local sellerPos   = Vector3.new(50, 17, 2867)

--// ================== UI READ: BAG COUNT ==================
local function getCurrentCount()
    local gui = LocalPlayer:FindFirstChild("PlayerGui"); if not gui then return nil end
    local bp  = gui:FindFirstChild("Backpack") or gui:FindFirstChild("BackpackGui") or gui:FindFirstChild("Inventory")
    if not bp then return nil end
    local lbl = bp:FindFirstChild("BagSize", true)
    if not (lbl and lbl:IsA("TextLabel")) then return nil end
    local text = tostring(lbl.Text or "")
    local cur = text:match("^(%d+)") or text:match("(%d+)")
    return cur and tonumber(cur) or nil
end

--// ================== BASIS SAVE/RESTORE ==================
local function captureBasis(cf)
    return {
        cf    = cf,                  -- simpan cf utuh (paling aman)
        pos   = cf.Position,         -- data tambahan (fallback)
        right = cf.RightVector,
        up    = cf.UpVector,
        look  = cf.LookVector,
    }
end

local function restoreFromBasis(hrp, basis)
    if not (hrp and basis) then return end

    if basis.cf then
        hrp.CFrame = basis.cf
    else
        -- fallback: rebuild matrix (ingat z = -look)
        local right = basis.right.Unit
        local up    = (basis.up - right * basis.up:Dot(right)).Unit
        local z     = (-basis.look - right * (-basis.look):Dot(right) - up * (-basis.look):Dot(up)).Unit
        hrp.CFrame  = CFrame.fromMatrix(basis.pos, right, up, z)
    end

    -- nolkan velocity biar gak mental
    pcall(function()
        hrp.AssemblyLinearVelocity  = Vector3.zero
        hrp.AssemblyAngularVelocity = Vector3.zero
    end)
end

--// ================== REMOTE RESOLVER (GUARD) ==================
local function resolveSellRemote()
    -- prioritas: variable global 'net' kalau ada
    if typeof(net) == "Instance" and net.FindFirstChild then
        local rf = net:FindFirstChild("RF/SellAllItems") or net:FindFirstChild("SellAllItems") or net:FindFirstChild("RF_SellAllItems")
        if rf then return rf end
    end
    -- fallback cari di ReplicatedStorage kalau struktur game beda
    local RS = game:GetService("ReplicatedStorage")
    local candidates = {
        "RF/SellAllItems", "Remotes/RF/SellAllItems",
        "RF_SellAllItems", "SellAllItems"
    }
    for _, path in ipairs(candidates) do
        local node = RS
        for seg in string.gmatch(path, "[^/]+") do
            node = node:FindFirstChild(seg)
            if not node then break end
        end
        if node then return node end
    end
    return nil
end

--// ================== STATE ==================
local isSelling = false
local nextAllowedSellAt = 0
local autoSellEnabled = false

--// ================== TOGGLE ==================
SellSection:AddToggle("AutoSellFish", {
    Title       = "Auto Sell Fish",
    Description = "Auto sell when backpack full",
    Default     = false,
    Mode        = "Toggle",
    Callback = function(state)
        autoSellEnabled = state
        if not state then
            isSelling = false
            return
        end

        task.spawn(function()
            while autoSellEnabled do
                local now = os.clock()
                local cur = getCurrentCount()

                if cur and cur >= SELL_TARGET and (not isSelling) and now >= nextAllowedSellAt then
                    isSelling = true

                    local hrp, char = getHRP()
                    if hrp then
                        -- (1) Save basis sebelum teleport
                        local savedBasis = captureBasis(hrp.CFrame)

                        -- (2) Teleport ke seller
                        hrp.CFrame = CFrame.new(sellerPos)

                        -- (3) Invoke remote (tunggu dikit biar server register pos)
                        task.wait(0.4)
                        local sellRemote = resolveSellRemote()
                        if sellRemote then
                            pcall(function() sellRemote:InvokeServer() end)
                        end

                        -- optional sinkronisasi lokal
                        if typeof(Stats_Reset)  == "function" then pcall(Stats_Reset) end
                        if typeof(NotifyHub)    == "function" then pcall(NotifyHub, "Sold all fishes & reset local stats") end

                        -- (3b) Tunggu BagSize benar2 turun (atau timeout 3.0s)
                        local startCount = cur
                        local t0 = os.clock()
                        while os.clock() - t0 < 3.0 do
                            local c = getCurrentCount()
                            if c and startCount and c < startCount then
                                break
                            end
                            task.wait(0.1)
                        end

                        -- (4) Balik ke basis saved
                        task.wait(0.2)
                        restoreFromBasis(hrp, savedBasis)

                        -- (opsional) “kunci” state fisik dikit
                        task.wait(0.05)
                        pcall(function()
                            local hum = char and char:FindFirstChildOfClass("Humanoid")
                            if hum then hum:Move(Vector3.zero) end
                        end)

                        -- (5) Cooldown biar loop gak langsung nyamber lagi
                        nextAllowedSellAt = os.clock() + 1.5
                    end

                    isSelling = false
                end

                task.wait(0.15)
            end
        end)
    end
})

-- ================== CUSTOM SELL TARGET (UI) ==================
-- default tetap 4998, bisa diubah lewat input
SELL_TARGET = SELL_TARGET or 5000

-- Input muncul lebih dulu, supaya user set angka sebelum menyalakan toggle
local okAddInput, errAddInput = pcall(function()
    SellSection:AddInput("SellTargetInput", {
        Title       = "Sell Target",
        Description = "",
        Default     = tostring(SELL_TARGET),
        Placeholder = "mis. 5000",
        Numeric     = true,     -- beberapa UI lib support flag ini
        Finished    = true,     -- callback saat user selesai input
        Callback = function(val)
            local n = tonumber(val)
            if n and n >= 1 then
                SELL_TARGET = math.floor(n)
                if typeof(NotifyHub) == "function" then
                    pcall(NotifyHub, ("Sell target set to %d"):format(SELL_TARGET))
                end
            else
                if typeof(NotifyHub) == "function" then
                    pcall(NotifyHub, "Invalid number for Sell Target")
                end
            end
        end
    })
end)
if not okAddInput then warn("[AutoSell] AddInput failed: " .. tostring(errAddInput)) end

-- ================== TOGGLE AUT0 SELL ==================
SellSection:AddToggle("AutoSellFish", {
    Title       = "Auto Sell Amount",
    Description = "Auto Sell when reach",
    Default     = false,
    Mode        = "Toggle",
    Callback = function(state)
        autoSellEnabled = state
        if not state then
            isSelling = false
            return
        end

        task.spawn(function()
            while autoSellEnabled do
                local now = os.clock()
                local cur = getCurrentCount()

                if cur and SELL_TARGET and cur >= SELL_TARGET and (not isSelling) and now >= nextAllowedSellAt then
                    isSelling = true

                    local hrp, char = getHRP()
                    if hrp then
                        local savedBasis = captureBasis(hrp.CFrame)
                        hrp.CFrame = CFrame.new(sellerPos)

                        task.wait(0.4)
                        local sellRemote = resolveSellRemote()
                        if sellRemote then pcall(function() sellRemote:InvokeServer() end) end

                        if typeof(Stats_Reset) == "function" then pcall(Stats_Reset) end
                        if typeof(NotifyHub) == "function" then pcall(NotifyHub, "Sold all fishes & reset local stats") end

                        local startCount = cur
                        local t0 = os.clock()
                        while os.clock() - t0 < 3.0 do
                            local c = getCurrentCount()
                            if c and startCount and c < startCount then break end
                            task.wait(0.1)
                        end

                        task.wait(0.2)
                        restoreFromBasis(hrp, savedBasis)

                        task.wait(0.05)
                        pcall(function()
                            local hum = char and char:FindFirstChildOfClass("Humanoid")
                            if hum then hum:Move(Vector3.zero) end
                        end)

                        nextAllowedSellAt = os.clock() + 1.5
                    end

                    isSelling = false
                end

                task.wait(0.15)
            end
        end)
    end
})

-- Section Save POS
local SaveSection = Tabs.Main:AddSection("Save POS")

local function _getHRP()
    local cf = workspace:FindFirstChild("Characters")
    local char = (cf and cf:FindFirstChild(LocalPlayer.Name)) or LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    return char and char:FindFirstChild("HumanoidRootPart")
end

getgenv().__LH_SavedPos      = getgenv().__LH_SavedPos or {}
getgenv().__LH_PosCounter    = getgenv().__LH_PosCounter or 0
getgenv().__LH_DefaultPos    = getgenv().__LH_DefaultPos or nil

local SavedPos         = getgenv().__LH_SavedPos
local SelectedPosName  = nil
local AutoInPosEnabled = false
local NotAtPosSeconds  = 0
local DIST_TOLERANCE   = 8

-- cf ↔ table
local function cf_to_tbl(cf)
    local x,y,z, r00,r01,r02, r10,r11,r12, r20,r21,r22 = cf:GetComponents()
    return {x=x,y=y,z=z,r00=r00,r01=r01,r02=r02,r10=r10,r11=r11,r12=r12,r20=r20,r21=r21,r22=r22}
end
local function tbl_to_cf(t)
    return CFrame.new(t.x,t.y,t.z, t.r00,t.r01,t.r02, t.r10,t.r11,t.r12, t.r20,t.r21,t.r22)
end

-- file save
local SAVE_FILE = "LimitHub/FishIT/saved/positions.json"

local function ensure_dirs()
    pcall(function()
        if not isfolder("LimitHub") then makefolder("LimitHub") end
        if not isfolder("LimitHub/FishIT") then makefolder("LimitHub/FishIT") end
        if not isfolder("LimitHub/FishIT/saved") then makefolder("LimitHub/FishIT/saved") end
    end)
end

local function read_positions()
    ensure_dirs()
    local ok, body = pcall(readfile, SAVE_FILE)
    if ok and body and #body > 0 then
        local ok2, obj = pcall(function() return HttpService:JSONDecode(body) end)
        if ok2 and type(obj) == "table" then return obj end
    end
    return { counter = 0, list = {}, default_name = nil }
end

local function write_positions(tbl)
    ensure_dirs()
    local ok, body = pcall(function() return HttpService:JSONEncode(tbl) end)
    if ok then pcall(writefile, SAVE_FILE, body) end
end

local function persist_saved_positions()
    local data = {
        counter = getgenv().__LH_PosCounter,
        default_name = getgenv().__LH_DefaultPos,
        list = {}
    }
    for name, cf in pairs(SavedPos) do
        table.insert(data.list, {name = name, cf = cf_to_tbl(cf)})
    end
    write_positions(data)
end

local function load_saved_positions()
    local data = read_positions()
    getgenv().__LH_PosCounter = data.counter or 0
    getgenv().__LH_DefaultPos = data.default_name or nil
    if type(data.list) == "table" then
        for _, entry in ipairs(data.list) do
            if entry.name and entry.cf then
                SavedPos[entry.name] = tbl_to_cf(entry.cf)
            end
        end
    end
end

-- dropdown
local PosDropdown = SaveSection:AddDropdown("ListPosDropdown", {
    Title = "List Pos",
    Values = {},
    Default = nil,
    Multi = false,
    Callback = function(v) SelectedPosName = v end
})

local function NamesFromSaved()
    local names = {}
    for n,_ in pairs(SavedPos) do table.insert(names, n) end
    table.sort(names)
    return names
end

local function RefreshPosDropdown()
    local names = NamesFromSaved()
    if PosDropdown and PosDropdown.SetValues then
        PosDropdown:SetValues(names)
    else
        PosDropdown.Values = names
    end
    if SelectedPosName and not SavedPos[SelectedPosName] then
        SelectedPosName = nil
    end
end

-- load awal
load_saved_positions()
RefreshPosDropdown()

-- set default dari file / last save
if getgenv().__LH_DefaultPos and SavedPos[getgenv().__LH_DefaultPos] then
    SelectedPosName = getgenv().__LH_DefaultPos
else
    local names = NamesFromSaved()
    if #names > 0 then
        SelectedPosName = names[#names]
        getgenv().__LH_DefaultPos = SelectedPosName
        persist_saved_positions()
    end
end
if SelectedPosName then
    if PosDropdown.SetValue then PosDropdown:SetValue(SelectedPosName) end
end

-- toggle auto in pos
SaveSection:AddToggle("AutoInPosToggle", {
    Title = "Auto in Pos",
    Description = "Auto back to pos after 5s",
    Default = false,
    Callback = function(on)
        AutoInPosEnabled = not not on
        NotAtPosSeconds = 0
        if on and SelectedPosName then
            getgenv().__LH_DefaultPos = SelectedPosName
            persist_saved_positions()
        end
    end
})

-- loop auto balik
task.spawn(function()
    while true do
        task.wait(0.5)
        if AutoInPosEnabled and SelectedPosName and SavedPos[SelectedPosName] then
            local hrp = _getHRP()
            if hrp then
                local target = SavedPos[SelectedPosName]
                local dist = (hrp.Position - target.Position).Magnitude
                if dist <= DIST_TOLERANCE then
                    NotAtPosSeconds = 0
                else
                    NotAtPosSeconds = NotAtPosSeconds + 0.5
                    if NotAtPosSeconds >= 5 then
                        hrp.CFrame = target
                        NotAtPosSeconds = 0
                        NotifyHub("Returned to "..SelectedPosName)
                        local args = {1}
                        local RS = game:GetService("ReplicatedStorage")
                        RS.Packages._Index["sleitnick_net@0.2.0"].net["RE/EquipToolFromHotbar"]:FireServer(unpack(args))
                    end
                end
            end
        end
    end
end)

-- save pos
SaveSection:AddButton({
    Title = "Save Pos",
    Description = "Save current position",
    Callback = function()
        local hrp = _getHRP()
        if not hrp then return end
        getgenv().__LH_PosCounter = getgenv().__LH_PosCounter + 1
        local name = ("Saved Pos %d"):format(getgenv().__LH_PosCounter)
        SavedPos[name] = hrp.CFrame
        getgenv().__LH_DefaultPos = name
        persist_saved_positions()
        RefreshPosDropdown()
        if PosDropdown.SetValue then PosDropdown:SetValue(name) end
        SelectedPosName = name
        NotifyHub("Saved "..name.." (set as default)")
    end
})

-- delete pos
SaveSection:AddButton({
    Title = "Delete Save Pos",
    Description = "Delete selected pos",
    Callback = function()
        if not SelectedPosName or not SavedPos[SelectedPosName] then
            NotifyHub("No pos selected")
            return
        end
        SavedPos[SelectedPosName] = nil
        if getgenv().__LH_DefaultPos == SelectedPosName then
            getgenv().__LH_DefaultPos = nil
        end
        persist_saved_positions()
        RefreshPosDropdown()
        NotifyHub("Deleted "..SelectedPosName)
        SelectedPosName = nil
    end
})

-- ================== AUTO FAVORITE ==================
local AutoFavSection = Tabs.Main:AddSection("Auto Favorite")

-- Safe require helpers
local function safeRequire(pathArray)
    local inst = ReplicatedStorage
    for _,name in ipairs(pathArray) do
        inst = inst:FindFirstChild(name)
        if not inst then return nil end
    end
    if not inst:IsA("ModuleScript") then return nil end
    local ok, mod = pcall(require, inst)
    if ok then return mod end
    return nil
end

-- Try require core modules (do not crash if missing)
local TierUtility       = safeRequire({"Shared","TierUtility"})
local ItemUtility       = safeRequire({"Shared","ItemUtility"})
local ItemStringUtility = safeRequire({"Shared","ItemStringUtility"})

-- Try find Replion safely (global or from Packages/_Index)
local Replion = rawget(_G,"Replion") or (getgenv and getgenv().Replion) or nil
if not Replion then
    local idx = ReplicatedStorage:FindFirstChild("Packages")
                 and ReplicatedStorage.Packages:FindFirstChild("_Index")
    if idx then
        for _, folder in ipairs(idx:GetChildren()) do
            local repl = folder:FindFirstChild("replion") or folder:FindFirstChild("Replion")
            if repl and repl:IsA("ModuleScript") then
                local ok, mod = pcall(require, repl)
                if ok then Replion = mod break end
            end
        end
    end
end

-- net & REFavoriteItem
local net2 = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild("sleitnick_net@0.2.0"):WaitForChild("net")
local REFavoriteItem = net2:WaitForChild("RE/FavoriteItem")

local FavState = {
    enabled = false,
    selected = {},  -- map lowercased rarity -> true
    lastRunAt = 0,
    interval = 6,
}

local RarityDropdownValues = {
    Common     = "Common",
    Uncommon   = "Uncommon",
    Rare       = "Rare",
    Epic       = "Epic",
    Legendary  = "Legendary",
    Mythic     = "Mythic",
    Secret     = "Secret",
}
local function _lw(s) return (tostring(s or ""):lower()) end

local function getTierNameFromItemId(itemId)
    if not ItemUtility then return nil end
    local baseItem = ItemUtility:GetItemData(itemId)
    if not baseItem then return nil end

    local data = baseItem.Data or baseItem.data or baseItem
    local chance = data and data.Probability and tonumber(data.Probability.Chance) or nil

    if chance and TierUtility and TierUtility.GetTierFromRarity then
        local td = TierUtility.GetTierFromRarity(nil, chance)
        if td and td.Name then return tostring(td.Name) end
    end

    local TierMap2 = {
        [1]="Common",[2]="Uncommon",[3]="Rare",[4]="Epic",
        [5]="Legendary",[6]="Mythic",[7]="Secret",
    }
    if data and data.Tier and TierMap2[data.Tier] then
        return TierMap2[data.Tier]
    end
    return nil
end

local function favoriteBySelectedRarities()
    if not Replion then return 0, "Replion module not found" end

    local DataReplion = Replion.Client and Replion.Client:WaitReplion("Data")
    if not DataReplion then return 0, "Data replion not available" end

    local invWrap = DataReplion:Get({"Inventory"})
    if not invWrap or not invWrap.Items then return 0 end

    local count = 0
    for _, v in pairs(invWrap.Items) do
        if not v.Favorited and v.Id then
            local tierName = getTierNameFromItemId(v.Id)
            if tierName and FavState.selected[_lw(tierName)] then
                if v.UUID then
                    pcall(function() REFavoriteItem:FireServer(v.UUID) end)
                    count += 1
                end
            end
        end
    end
    return count
end

AutoFavSection:AddDropdown("FavRarityDropdown", {
    Title = "Choose Rarities to Favorite",
    Description = "Auto favorite fish by rarity",
    Values = RarityDropdownValues,
    Default = {},
    Multi = true,
    Callback = function(map)
        FavState.selected = {}
        if type(map) == "table" then
            for label, chosen in pairs(map) do
                if chosen then FavState.selected[_lw(label)] = true end
            end
        end
    end
})

AutoFavSection:AddToggle("FavRarityToggle", {
    Title = "Enable Auto Favorite",
    Description = "Periodically favorites items of chosen rarities",
    Default = false,
    Callback = function(on)
        FavState.enabled = not not on
        if FavState.enabled then
            local n, err = favoriteBySelectedRarities()
            if err and NotifyHub then
                NotifyHub("Auto Favorite warning: "..tostring(err))
            elseif (n or 0) > 0 and NotifyHub then
                NotifyHub(("Favorited %d items (initial)"):format(n))
            end
        end
    end
})

task.spawn(function()
    while true do
        task.wait(1)
        if FavState.enabled then
            local now = os.clock()
            if now - (FavState.lastRunAt or 0) >= FavState.interval then
                FavState.lastRunAt = now
                local _, err = favoriteBySelectedRarities()
                if err and NotifyHub then
                    NotifyHub("Auto Favorite warning: "..tostring(err))
                end
            end
        end
    end
end)

-- ================= Player Section =================
local PlayerSection = Tabs.Player:AddSection("Player Features")
PlayerSection:AddSlider("WalkSpeed", {
    Title = "WalkSpeed", Description = "Adjust walk speed",
    Min = 16, Max = 150, Increment = 1, Rounding = 0, Default = 16,
    Callback = function(val)
        local hum = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if hum then hum.WalkSpeed = val end
    end
})
PlayerSection:AddSlider("JumpPower", {
    Title = "Jump Power", Description = "Adjust jump power",
    Min = 50, Max = 500, Increment = 10, Rounding = 0, Default = 50,
    Callback = function(val)
        local hum = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if hum then
            hum.UseJumpPower = true
            hum.JumpPower = val
        end
    end
})



-- ================= Anti AFK =================
local AfkSection = Tabs.Main:AddSection("Anti AFK")

local RS = game:GetService("ReplicatedStorage")
local afkModule = RS:WaitForChild("Controllers"):WaitForChild("AFKController")

local OriginalAFK = nil

local function revokeAFK()
    local ok, AFK = pcall(require, afkModule)
    if ok and type(AFK) == "table" then
        if not OriginalAFK then
            OriginalAFK = {}
            for k,v in pairs(AFK) do
                OriginalAFK[k] = v
            end
        end
        for k,v in pairs(AFK) do
            if type(v) == "function" then
                AFK[k] = function(...) return nil end
            end
        end
        pcall(function() if AFK.Init then AFK.Init() end end)
        pcall(function() if AFK.Start then AFK.Start() end end)
        warn("[LimitHub] AFKController revoked")
    else
        warn("AFKController gagal di-require")
    end
end

local function restoreAFK()
    if not OriginalAFK then return end
    local ok, AFK = pcall(require, afkModule)
    if ok and type(AFK) == "table" then
        for k,v in pairs(OriginalAFK) do
            AFK[k] = v
        end
        warn("[LimitHub] AFKController restored")
    end
end

AfkSection:AddToggle("AntiAFKToggle", {
    Title = "Enable Anti AFK",
    Description = "Bypass AFK Detect",
    Default = false,
    Callback = function(state)
        if state then
            revokeAFK()
        else
            restoreAFK()
        end
    end
})

-- ================= WEATHER =================
local WeatherSection = Tabs.Weather:AddSection("Auto Weather")

local __autoWeatherOn = false
local __selectedWeathers = {}

local function _normW(s)
    return (tostring(s or ""):gsub("^%s+",""):gsub("%s+$",""):lower())
end
local WeatherAlias = { ["strom"] = "Storm" }

local function __purchaseWeather(preset)
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local ok, res = pcall(function()
        local canon = WeatherAlias[_normW(preset)] or preset
        local args = { tostring(canon or "Wind") }
        local rf = ReplicatedStorage
            :WaitForChild("Packages")
            :WaitForChild("_Index")
            :WaitForChild("sleitnick_net@0.2.0")
            :WaitForChild("net")
            :WaitForChild("RF/PurchaseWeatherEvent")
        return rf:InvokeServer(unpack(args))
    end)
    if not ok then warn("[Weather] Invoke failed:", res) end
    return ok, res
end

local function __purchaseAll(list)
    for _, w in ipairs(list) do __purchaseWeather(w) end
end

task.spawn(function()
    while task.wait(10) do
        if __autoWeatherOn and #__selectedWeathers > 0 then
            __purchaseAll(__selectedWeathers)
        end
    end
end)

local WeatherValues = {
    Wind    = "Wind",
    Cloudy  = "Cloudy",
    Snow    = "Snow",
    Strom   = "Strom",
    Radiant = "Radiant",
    ["Shark Hunt"] = "Shark Hunt",
}

WeatherSection:AddDropdown("WeatherChoice", {
    Title = "Weather Preset",
    Values = WeatherValues,
    Multi  = true,
    Default = {},
    Callback = function(valMap)
        __selectedWeathers = {}
        if type(valMap) == "table" then
            for label, chosen in pairs(valMap) do
                if chosen then table.insert(__selectedWeathers, tostring(label)) end
            end
        elseif type(valMap) == "string" then
            __selectedWeathers = { valMap }
        end
    end
})

WeatherSection:AddToggle("AutoWeatherToggle", {
    Title = "Auto Weather",
    Description = "Auto purchase selected weather",
    Default = false,
    Callback = function(state)
        __autoWeatherOn = state and true or false
        if __autoWeatherOn and #__selectedWeathers > 0 then
            __purchaseAll(__selectedWeathers)
        end
    end
})

-- ================= ENCHANT =================
local EnchantSection = Tabs.Enchant:AddSection("Enchant Rod Option")

local ENCHANT_POS = Vector3.new(3258.40, -1300.65, 1386.94)

EnchantSection:AddButton({
    Title = "Enchant Rod",
    Description = "Make sure you have enchant stone!",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local net = ReplicatedStorage
            :WaitForChild("Packages")
            :WaitForChild("_Index")
            :WaitForChild("sleitnick_net@0.2.0")
            :WaitForChild("net")

        local charFolder = workspace:FindFirstChild("Characters")
        local char = charFolder and charFolder:FindFirstChild(LocalPlayer.Name)
        local hrp = char and char:FindFirstChild("HumanoidRootPart")
        if not hrp then return end

        local originalCF = hrp.CFrame

        hrp.CFrame = CFrame.new(ENCHANT_POS + Vector3.new(0,3,0))
        task.wait(1)

        pcall(function()
            local args = { "37827319-3977-45e7-b445-ac44cec95386", "EnchantStones" }
            net:WaitForChild("RE/EquipItem"):FireServer(unpack(args))
        end)

        pcall(function()
            net:WaitForChild("RE/ActivateEnchantingAltar"):FireServer()
        end)

        task.delay(0.25, function()
            pcall(function()
                hrp.CFrame = originalCF
            end)
        end)

        if NotifyHub then
            NotifyHub("Enchant Progress")
        end
    end
})

-- ===================== CLEAN SHOP PANELS (FIXED) =====================

-- Single ReplicatedStorage / Net reference (avoid duplicate locals)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Net = ReplicatedStorage
    :WaitForChild("Packages")
    :WaitForChild("_Index")
    :WaitForChild("sleitnick_net@0.2.0")
    :WaitForChild("net")

-- Remotes (created once, re-used across sections)
local PurchaseBaitRF = PurchaseBaitRF or Net:WaitForChild("RF/PurchaseBait")
local PurchaseRodRF  = PurchaseRodRF  or Net:WaitForChild("RF/PurchaseFishingRod")
local PurchaseBoatRF = PurchaseBoatRF or Net:WaitForChild("RF/PurchaseBoat")
local PurchaseGearRF = PurchaseGearRF or Net:WaitForChild("RF/PurchaseGear")

-- Global state (single getgenv; do NOT re-declare again)
local G = (getgenv and getgenv()) or _G
G.__SelectedBaitId = G.__SelectedBaitId or nil
G.__SelectedRodId  = G.__SelectedRodId  or nil
G.__SelectedBoatId = G.__SelectedBoatId or nil
G.__SelectedItemId = G.__SelectedItemId or nil

-- ---------- BOBBERS / BAIT SHOP ----------
-- Fallbacks if not defined earlier
BaitIds = BaitIds or {
    ["Luck Bait"] = 2,
    ["Midnight Bait"] = 3,
    ["Nature Bait"] = 4,
    ["Chroma Bait"] = 5,
    ["Dark Matter Bait"] = 6,
    ["Corrupt Bait"] = 7,
    ["Aether Bait"] = 8,
}
BaitList = BaitList or {
    "Luck Bait","Midnight Bait","Nature Bait","Chroma Bait",
    "Dark Matter Bait","Corrupt Bait","Aether Bait"
}

local BobberSection = Tabs.Shop:AddSection("Bobbers Shop")

BobberSection:AddDropdown("BaitDropdown", {
    Title = "Select: Bait",
    Values = BaitList,
    Default = nil,
    Multi = false,
    Callback = function(value)
        if not value then return end
        local id = BaitIds[value]
        if id then
            G.__SelectedBaitId = id
            warn(("[Bait] Selected '%s' -> id=%s"):format(value, tostring(id)))
        else
            G.__SelectedBaitId = nil
            warn("[Bait] Unknown selection:", tostring(value))
        end
    end
})

BobberSection:AddButton({
    Title = "Buy Selected Bait",
    Description = "",
    Callback = function()
        local id = G.__SelectedBaitId
        if not id then
            warn("[Bait] Please select a bait first!")
            return
        end
        pcall(function() PurchaseBaitRF:InvokeServer(id) end)
    end
})

-- ---------- ROD SHOP ----------
local RodSection = Tabs.Shop:AddSection("Rod Shop")

local RodIds = {
    ["Luck Rod"]      = 79,   -- 350
    ["Carbon Rod"]    = 76,   -- 900
    ["Grass Rod"]     = 85,   -- 1.5K
    ["Demascus Rod"]  = 77,   -- 3K
    ["Ice Rod"]       = 78,   -- 5K
    ["Lucky Rod"]     = 4,    -- 15K
    ["Angler Rod"]    = 168,  -- 8,000K
    ["Ares Rod"]      = 126,  -- 3,000K
    ["Astral Rod"]    = 5,    -- 1,000K
    ["Chrome Pod"]    = 7,    -- 437K
    ["Midnight Rod"]  = 80,   -- 50K
    ["Steampunk Rod"] = 6,    -- 215K
}

local RodList = {
    "Luck Rod","Carbon Rod","Grass Rod","Demascus Rod","Ice Rod","Lucky Rod",
    "Angler Rod","Ares Rod","Astral Rod","Chrome Pod","Midnight Rod","Steampunk Rod"
}

RodSection:AddDropdown("RodDropdown", {
    Title   = "Select Rod",
    Values  = RodList,
    Default = nil,
    Multi   = false,
    Callback = function(value)
        local id = value and RodIds[value]
        if not id then
            G.__SelectedRodId = nil
            warn("[Rod] Unknown selection:", tostring(value))
            return
        end
        G.__SelectedRodId = id
        warn(("[Rod] Selected '%s' -> id=%s"):format(value, tostring(id)))
    end
})

RodSection:AddButton({
    Title = "Buy Selected Rod",
    Description = "Purchase the rod selected in the dropdown",
    Callback = function()
        local id = G.__SelectedRodId
        if not id then
            warn("[Rod] Please select a rod first!")
            return
        end
        pcall(function() PurchaseRodRF:InvokeServer(id) end)
    end
})

-- ---------- BOAT SHOP ----------
local BoatSection = Tabs.Shop:AddSection("Boat Shop")

local BoatIds = {
    ["Small Boat"]     = 1, -- 300
    ["Kayak"]          = 2, -- 1.1k
    ["Jetski"]         = 3, -- 7.5k
    ["Highfield Boat"] = 4, -- 25k
    ["Speed Boat"]     = 5, -- 70k
    ["Fishing Boat"]   = 6, -- 180k
    ["Mini Yacht"]     = 7, -- 1.20m
}

local BoatList = {
    "Small Boat","Kayak","Jetski","Highfield Boat","Speed Boat","Fishing Boat","Mini Yacht"
}

BoatSection:AddDropdown("BoatDropdown", {
    Title   = "Select Boat",
    Values  = BoatList,
    Default = nil,
    Multi   = false,
    Callback = function(value)
        local id = value and BoatIds[value]
        if not id then
            G.__SelectedBoatId = nil
            warn("[Boat] Unknown selection:", tostring(value))
            return
        end
        G.__SelectedBoatId = id
        warn(("[Boat] Selected '%s' -> id=%s"):format(value, tostring(id)))
    end
})

BoatSection:AddButton({
    Title = "Buy Selected Boat",
    Description = "Purchase the boat selected in the dropdown",
    Callback = function()
        local id = G.__SelectedBoatId
        if not id then
            warn("[Boat] Please select a boat first!")
            return
        end
        pcall(function() PurchaseBoatRF:InvokeServer(id) end)
    end
})

-- ---------- ITEMS SHOP ----------
local ItemsSection = Tabs.Shop:AddSection("Items Shop")

local ItemIds = {
    ["Diving Gear"]   = 105,
    ["Fishing Radar"] = 81,
}

local ItemList = { "Diving Gear", "Fishing Radar" }

ItemsSection:AddDropdown("ItemDropdown", {
    Title   = "Select Item",
    Values  = ItemList,
    Default = nil,
    Multi   = false,
    Callback = function(value)
        local id = value and ItemIds[value]
        if not id then
            G.__SelectedItemId = nil
            warn("[Item] Unknown selection:", tostring(value))
            return
        end
        G.__SelectedItemId = id
        warn(("[Item] Selected '%s' -> id=%s"):format(value, tostring(id)))
    end
})

ItemsSection:AddButton({
    Title = "Buy Selected Item",
    Description = "Purchase the item selected in the dropdown",
    Callback = function()
        local id = G.__SelectedItemId
        if not id then
            warn("[Item] Please select an item first!")
            return
        end
        pcall(function() PurchaseGearRF:InvokeServer(id) end)
    end
})


local IslandsSection = Tabs.Teleport:AddSection("Islands Teleport")
local islandCoordsList = {
    ["01"]={name="Weather Machine", position=Vector3.new(-1471,-3,1929)},
    ["02"]={name="Esoteric Depths", position=Vector3.new(3157,-1303,1439)},
    ["03"]={name="Tropical Grove",  position=Vector3.new(-2038,3,3650)},
    ["04"]={name="Stingray Shores", position=Vector3.new(-32,4,2773)},
    ["05"]={name="Kohana Volcano",  position=Vector3.new(-519,24,189)},
    ["06"]={name="Coral Reefs",     position=Vector3.new(-3095,1,2177)},
    ["07"]={name="Crater Island",    position=Vector3.new(968,1,4854)},
    ["08"]={name="Kohana",           position=Vector3.new(-658,3,719)},
    ["09"]={name="Winter Fest",      position=Vector3.new(1611,4,3280)},
    ["10"]={name="Isoteric Island",  position=Vector3.new(1987,4,1400)},
    ["11"]={name="Lost Isle",        position=Vector3.new(-3693.93,-135.57+5,-1022.77)},
}
for _, data in pairs(islandCoordsList) do
    IslandsSection:AddButton({
        Title = data.name, Description = "Teleport to " .. data.name,
        Callback = function()
            pcall(function()
                local charFolder = workspace:WaitForChild("Characters", 5)
                local char = charFolder:FindFirstChild(LocalPlayer.Name); if not char then error("Character not found") end
                local hrp = char:FindFirstChild("HumanoidRootPart") or char:WaitForChild("HumanoidRootPart", 3)
                if not hrp then error("HumanoidRootPart not found") end
                hrp.CFrame = CFrame.new(data.position + Vector3.new(0,5,0))
            end)
        end
    })
end
-- ================= TELEPORT TO PLAYER (DisplayName) =================
local TPPlayerSection = Tabs.Teleport:AddSection("Teleport to Player")

local SelectedPlayer = nil
local PlayerDropdown
local DisplayNameToUser = {} -- mapping DisplayName -> Username

local function RefreshPlayerList()
    local displayNames = {}
    DisplayNameToUser = {}
    for _, p in ipairs(Players:GetPlayers()) do
        if p ~= LocalPlayer then
            table.insert(displayNames, p.DisplayName)
            DisplayNameToUser[p.DisplayName] = p.Name
        end
    end
    if PlayerDropdown then
        TPPlayerSection:Remove(PlayerDropdown)
    end
    PlayerDropdown = TPPlayerSection:AddDropdown("PlayerListDropdown", {
        Title = "Select Player",
        Values = displayNames,
        Default = nil,
        Multi = false,
        Callback = function(value)
            SelectedPlayer = value
        end
    })
end

-- ==== STATE ====
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local PlayerList = {}             -- list untuk dropdown (DisplayName (@Username))
local DisplayNameToUser = {}      -- map "Display (@User)" -> "Username"
local SelectedPlayer = nil        -- string display yang dipilih

local PlayerDropdown -- simpan handler dropdown biar bisa update nilainya

-- ==== UTIL ====
local function getMyHRP()
    local charFolder = workspace:FindFirstChild("Characters")
    local char = (charFolder and charFolder:FindFirstChild(LocalPlayer.Name))
              or LocalPlayer.Character
              or LocalPlayer.CharacterAdded:Wait()
    return char and char:FindFirstChild("HumanoidRootPart")
end

-- ==== REFRESH LIST TANPA :Remove() ====
local function RefreshPlayerList()
    -- kosongkan dengan cara yang benar
    if table.clear then
        table.clear(PlayerList)
        table.clear(DisplayNameToUser)
    else
        -- fallback kalau environment gak punya table.clear
        for k in pairs(PlayerList) do PlayerList[k] = nil end
        for k in pairs(DisplayNameToUser) do DisplayNameToUser[k] = nil end
    end

    for _, p in ipairs(Players:GetPlayers()) do
        -- bikin label yang unik & enak dibaca
        local label = string.format("%s (@%s)", p.DisplayName or p.Name, p.Name)
        table.insert(PlayerList, label)
        DisplayNameToUser[label] = p.Name
    end

    -- update dropdown kalau ada
    if PlayerDropdown then
        pcall(function()
            if PlayerDropdown.SetValues then
                PlayerDropdown:SetValues(PlayerList)
            end
            -- reset selection kalau player sebelumnya udah gak ada
            if SelectedPlayer and not DisplayNameToUser[SelectedPlayer] then
                SelectedPlayer = nil
                if PlayerDropdown.SetValue then
                    PlayerDropdown:SetValue(nil)
                end
            end
        end)
    end
end

-- panggil awal & ikat ke event
RefreshPlayerList()
Players.PlayerAdded:Connect(RefreshPlayerList)
Players.PlayerRemoving:Connect(RefreshPlayerList)

-- ==== UI: Dropdown pilih player ====
-- Catatan: Sesuaikan API lib UI kamu. Banyak lib punya AddDropdown yang return handle.
PlayerDropdown = TPPlayerSection:AddDropdown("SelectTPPlayer", {
    Title    = "Select Player",
    Values   = PlayerList,
    Multi    = false,
    Default  = 1,
    Callback = function(choice)
        SelectedPlayer = choice
    end
})

-- ==== UI: Tombol teleport ====
TPPlayerSection:AddButton({
    Title = "Teleport to the Player!",
    Description = "Teleport to selected player",
    Callback = function()
        if not SelectedPlayer then
            if typeof(NotifyHub) == "function" then NotifyHub("Please select a player first!") end
            return
        end
        local username = DisplayNameToUser[SelectedPlayer]
        local target   = username and Players:FindFirstChild(username)

        if target and target.Character then
            local hrpTarget = target.Character:FindFirstChild("HumanoidRootPart")
            local myHRP     = getMyHRP()
            if hrpTarget and myHRP then
                myHRP.CFrame = hrpTarget.CFrame + Vector3.new(0, 3, 0)
                if typeof(NotifyHub) == "function" then NotifyHub("Teleported to "..SelectedPlayer) end
                return
            end
        end
        if typeof(NotifyHub) == "function" then NotifyHub("Target player not found!") end
    end
})

-- ================= NPC =================
local NPCSection = Tabs.Teleport:AddSection("NPC Teleport")
local npcFolder = ReplicatedStorage:WaitForChild("NPC")
for _, npc in pairs(npcFolder:GetChildren()) do
    if npc:IsA("Model") then
        local hrp = npc:FindFirstChild("HumanoidRootPart") or npc.PrimaryPart
        if hrp then
            NPCSection:AddButton({
                Title = npc.Name, Description = "Teleport to " .. npc.Name,
                Callback = function()
                    local charFolder = workspace:FindFirstChild("Characters", 5)
                    local char = charFolder and charFolder:FindFirstChild(LocalPlayer.Name)
                    if not char then return end
                    local myHRP = char:FindFirstChild("HumanoidRootPart")
                    if myHRP then myHRP.CFrame = hrp.CFrame + Vector3.new(0,3,0) end
                end
            })
        end
    end
end

-- ================= EVENT HUNT (Smart Event Hunter FA) ================
local EventSection = Tabs.Event:AddSection("Auto Event")

-- ===== Global env / default states =====
local G = (getgenv and getgenv()) or _G
G.autoEvent           = G.autoEvent or false          -- flag utama toggle
G.savedCFrame         = G.savedCFrame or nil          -- posisi/orientasi semula
G.__AutoEvent_Running = G.__AutoEvent_Running or false
G.__AutoEvent_Task    = G.__AutoEvent_Task or nil
G.__FA_Active         = G.__FA_Active or false        -- status Fake Anchor aktif?

-- Optional states dari ekosistem kamu (biarin kalau belum ada)
G.toggleState = G.toggleState or { bool_autoFish = false, autoFish = false }

-- ===== Services =====
local Players    = game:GetService("Players")
local Workspace  = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer

-- ===== Helpers =====
local function safeSetToggle(tg, state)
    pcall(function()
        if tg and typeof(tg.Set) == "function" then
            tg:Set(state)
        elseif tg and typeof(tg.SetState) == "function" then
            tg:SetState(state)
        end
    end)
end

local function safeFloating(on)
    pcall(function()
        if floatingPlat then floatingPlat(on) end
    end)
end

local function getHRP()
    local chars = Workspace:FindFirstChild("Characters")
    local my    = chars and chars:FindFirstChild(LocalPlayer.Name)
    return my and my:FindFirstChild("HumanoidRootPart") or nil
end

-- ---------- Fake Anchor (tanpa Anchored=true) ----------
local function FA_apply(hrp)
    if not hrp or G.__FA_Active then return end
    -- nolkan velocity dulu
    pcall(function()
        hrp.AssemblyLinearVelocity = Vector3.new()
        hrp.AssemblyAngularVelocity = Vector3.new()
    end)
    -- lock posisi
    local bv = Instance.new("BodyVelocity")
    bv.Name = "__LH_FA_BV"
    bv.MaxForce = Vector3.new(1e6, 1e6, 1e6)
    bv.Velocity = Vector3.new(0, 0, 0)
    bv.Parent = hrp

    -- stabilkan orientasi
    local bg = Instance.new("BodyGyro")
    bg.Name = "__LH_FA_BG"
    bg.MaxTorque = Vector3.new(1e6, 1e6, 1e6)
    bg.P = 1e5
    bg.CFrame = hrp.CFrame
    bg.Parent = hrp

    G.__FA_Active = true
end

local function FA_release(hrp)
    if not hrp then hrp = getHRP() end
    if not hrp then G.__FA_Active = false return end
    for _, n in ipairs({"__LH_FA_BV","__LH_FA_BG"}) do
        local obj = hrp:FindFirstChild(n)
        if obj then pcall(function() obj:Destroy() end) end
    end
    -- pastikan bebas gerak lagi
    pcall(function()
        hrp.AssemblyLinearVelocity = hrp.AssemblyLinearVelocity
    end)
    G.__FA_Active = false
end
-- -------------------------------------------------------

local function findEventTargetPos()
    local props = Workspace:FindFirstChild("Props")
    if not props then return nil end
    for _, child in ipairs(props:GetChildren()) do
        if child:IsA("Model") then
            if child.PrimaryPart then
                return child.PrimaryPart.Position
            else
                local part = child:FindFirstChildWhichIsA("BasePart")
                if part then return part.Position end
            end
        elseif child:IsA("BasePart") then
            return child.Position
        end
    end
    return nil
end

-- =========================================
-- Main loop (tiap 4 detik; idle saat toggle OFF)
-- =========================================
function startAutoEventLoop()
    if G.__AutoEvent_Running then return end
    G.__AutoEvent_Running = true

    if G.__AutoEvent_Task then
        pcall(task.cancel, G.__AutoEvent_Task)
        G.__AutoEvent_Task = nil
    end

    G.__AutoEvent_Task = task.spawn(function()
        while task.wait(4) do
            local hrp = getHRP()

            -- Toggle OFF → rapikan state + lepas FA lalu lanjut iterasi
            if not G.autoEvent then
                safeFloating(false)
                if G.floatToggle then safeSetToggle(G.floatToggle, false) end
                G.savedCFrame = nil
                FA_release(hrp)
                continue
            end

            -- Toggle ON
            safeFloating(true) -- worm event sering di bawah air

            local targetPos = findEventTargetPos()
            if targetPos and hrp then
                -- Simpan posisi/orientasi asli sekali saja
                if not G.savedCFrame then
                    G.savedCFrame = hrp.CFrame
                end

                -- Kalau jauh > 75 stud dari event, TP di atasnya (40)
                local dist = (hrp.Position - targetPos).Magnitude
                if dist > 75 then
                    hrp.CFrame = CFrame.new(targetPos + Vector3.new(0, 40, 0))
                end

                -- aktifkan Fake Anchor saat di event
                FA_apply(hrp)

                -- Pastikan float on
                if G.floatToggle then
                    safeSetToggle(G.floatToggle, true)
                end

                -- Pastikan AutoFish menyala (sinkron sama ekosistem kamu)
                if not G.toggleState.bool_autoFish then
                    G.toggleState.bool_autoFish = true
                end
                if not G.toggleState.autoFish then
                    G.toggleState.autoFish = true
                    if G.autoFishToggle then
                        safeSetToggle(G.autoFishToggle, true)
                    end
                end
            else
                -- Props kosong → balik ke origin, lepas FA, & matikan float
                if G.savedCFrame and hrp then
                    hrp.CFrame = G.savedCFrame
                end
                G.savedCFrame = nil
                FA_release(hrp)
                if G.floatToggle then
                    safeSetToggle(G.floatToggle, false)
                end
                safeFloating(false)
            end
        end
    end)
end

-- Jalankan loop (akan idle bila toggle OFF)
startAutoEventLoop()

-- =========================================
-- TOGGLE (LimitHub Section API)
-- =========================================
EventSection:AddToggle("EH_SmartHunterFA", {
    Title   = "Auto Event",
    Content = "Auto Fish at Event",
    Default = false,
    Mode    = "Toggle",
    Callback = function(state)
        G.autoEvent = state
        if state then
            startAutoEventLoop() -- jaga-jaga kalau loop belum aktif
        else
            -- kalau dimatikan manual, langsung lepas FA juga biar aman
            FA_release(getHRP())
        end
    end
})

-- =========================================
-- Reset state saat respawn
-- =========================================
LocalPlayer.CharacterAdded:Connect(function()
    -- Saat respawn, matikan float, lepas FA & hapus posisi tersimpan
    local hrp = getHRP()
    FA_release(hrp)
    safeFloating(false)
    if G.floatToggle then safeSetToggle(G.floatToggle, false) end
    G.savedCFrame = nil
end)

local SettingsSection = Tabs.Settings:AddSection("Performance & Server")
SettingsSection:AddButton({
    Title = "Boost FPS (Maximize Performance)",
    Description = "Optimize game for better FPS",
    Callback = function()
        for _, v in pairs(game:GetDescendants()) do
            if v:IsA("BasePart") then v.Material = Enum.Material.SmoothPlastic v.Reflectance = 0
            elseif v:IsA("Decal") or v:IsA("Texture") then v.Transparency = 1 end
        end
        local Lighting = game:GetService("Lighting")
        for _, effect in pairs(Lighting:GetChildren()) do if effect:IsA("PostEffect") then effect.Enabled = false end end
        Lighting.GlobalShadows = false
        Lighting.FogEnd = 1e10
        settings().Rendering.QualityLevel = "Level01"
    end
})

local TeleportService = game:GetService("TeleportService")
local function Rejoin() local p = Players.LocalPlayer; if p then TeleportService:Teleport(game.PlaceId, p) end end
local function ServerHop()
    local placeId, servers, cursor = game.PlaceId, {}, ""
    repeat
        local url = "https://games.roblox.com/v1/games/"..placeId.."/servers/Public?sortOrder=Asc&limit=100" .. (cursor~="" and ("&cursor="..cursor) or "")
        local ok, result = pcall(function() return HttpService:JSONDecode(game:HttpGet(url)) end)
        if ok and result and result.data then
            for _, server in pairs(result.data) do
                if server.playing < server.maxPlayers and server.id ~= game.JobId then
                    table.insert(servers, server.id)
                end
            end
            cursor = result.nextPageCursor or ""
        else break end
    until not cursor or #servers > 0
    if #servers > 0 then TeleportService:TeleportToPlaceInstance(placeId, servers[math.random(1,#servers)], LocalPlayer) end
end
SettingsSection:AddButton({ Title = "Rejoin Server", Description = "Rejoin the current server", Callback = Rejoin })
SettingsSection:AddButton({ Title = "Server Hop (New Server)", Description = "Hop to a new server", Callback = ServerHop })

-- ================= Catch hook → panggil sendCatchEmbedOnce =================
do
    local LP = Players.LocalPlayer
    local PG2 = LP:WaitForChild("PlayerGui")
    local hooked      = setmetatable({}, {__mode = "k"})
    local lastLogAt   = setmetatable({}, {__mode = "k"})

    local function clean(s)
        if not s then return "" end
        s = s:gsub("[%z\1-\127\194-\244][\128-\191]*", function(ch) return (ch:byte() <= 127) and ch or "" end)
        return (s:gsub("^%s+",""):gsub("%s+$",""))
    end

    local function parseFishLine(s)
        s = clean(s)
        local name, kg = s:match("^(.-)%s*%(([%d%.]+)%s*kg%)$")
        if name then return (name:gsub("%s+"," ")), tonumber(kg) end
        return (s:gsub("%s+"," ")), nil
    end

    local function findSiblingInfo(container)
        local odds, fishLine
        for _, d in ipairs(container:GetDescendants()) do
            if d:IsA("TextLabel") then
                local t = clean(d.Text or "")
                if (not odds) and t:match("^(%d+)%s*in%s*(%d+)$") then odds = t:gsub("%s+"," ") end
                if (not fishLine) and (t:match("%(([%d%.]+)%s*kg%)")) then fishLine = t end
            end
            if odds and fishLine then break end
        end
        return odds, fishLine
    end

    local function logOnce(container, name, kg, odds)
        local now = os.clock()
        local last = lastLogAt[container]
        if last and now - last < 0.35 then return end
        lastLogAt[container] = now
        sendCatchEmbedOnce(tostring(name), odds, kg)
    end

    local function tryAssembleFrom(container)
        local odds, fishLine = findSiblingInfo(container)
        if not fishLine then return end
        local name, kg = parseFishLine(fishLine)
        if not name or name == "" then return end
        logOnce(container, name, kg, odds)
    end

    local function hookLabel(lbl)
        if hooked[lbl] then return end
        hooked[lbl] = true
        local function onChange()
            local t = clean(lbl.Text or "")
            if t == "" then return end
            if t:match("^(%d+)%s*in%s*(%d+)$") then tryAssembleFrom(lbl.Parent or lbl); return end
            if t:match("%(([%d%.]+)%s*kg%)") then tryAssembleFrom(lbl.Parent or lbl); return end
            if t:find("^%s*You%s*got") then task.delay(0.06, function() tryAssembleFrom(lbl.Parent or lbl) end) end
        end
        onChange()
        lbl:GetPropertyChangedSignal("Text"):Connect(onChange)
    end

    for _, d in ipairs(PG2:GetDescendants()) do if d:IsA("TextLabel") then hookLabel(d) end end
    PG2.DescendantAdded:Connect(function(obj) if obj:IsA("TextLabel") then hookLabel(obj) end end)
end

-- ================= Save/Load config =================
local resetcfg = false
SaveManager:SetLibrary(Library)
if isfile(CONFIG_PATH) then pcall(function() SaveManager:Load(CONFIG_PATH) end) end

local AutoSaveRunning = true
task.spawn(function()
    while AutoSaveRunning do
        task.wait(1)
        if not resetcfg then pcall(function() SaveManager:Save(CONFIG_PATH) end) end
    end
end)

Tabs.Settings:AddButton({
    Title = "Reset Config",
    Callback = function()
        AutoSaveRunning = false
        resetcfg = true
        G.__LimitHub_Running = false
        task.wait(0.15)
        if isfile(CONFIG_PATH) then
            delfile(CONFIG_PATH)
            NotifyHub("Reseted Config")
        else
            NotifyHub("No config detected")
        end
    end
})
